import re

class visitor:
    def visit(self,element):
        pass
class structure_visitor(visitor):
    def visit(self,element):
        if isinstance(element, minus):
            print(minus.visit())
        elif isinstance(element, term):
            element.s_visit()
        elif isinstance(element, operator1):
            print(operator1.visit())
        elif isinstance(element, operator2):
            print(operator2.visit())
        elif isinstance(element, number):
            element.s_visit()
        elif isinstance(element, decpoint):
            print(decpoint.visit())
        elif isinstance(element, digit):
            print(element.visit())
        elif isinstance(element,expression):
            element.s_visit()
        pass
class value_visitor(visitor):
    def visit(self,element):
        if isinstance(element, minus):
            element.v_visit()
        elif isinstance(element, term):
            element.v_visit()
        elif isinstance(element, operator1):
            element.v_visit()
        elif isinstance(element, operator2):
            element.v_visit()
        elif isinstance(element, number):
            element.v_visit()
        elif isinstance(element, decpoint):
            element.v_visit()
        elif isinstance(element, digit):
            element.v_visit()
        elif isinstance(element,expression):
            element.v_visit()
        pass
class non_terminal:
    def __int__(self,name,val,element,visitor):
        self.name=name
        self.val=val
        self.element=[minus(),digit(),decpoint(),number(),operator1(),operator2(),term(),expression()]
    def interpret(self,context):
        pass
    def set_visitor(self,target_visitor):
        self.visitor=target_visitor
    def visit(self):
        self.visitor.visit(self)
    def v_visit(self):
        pass
    def s_visit(self):
        pass
class minus(non_terminal):
    def __int__(self):
        self.name='minus'
        self.val=-1
    def v_visit(self):
        print('Value:')
        print('	number : '+str(self.val))

    def interpret(self, context):
        if context[0]=='-':
            valid=1
            rem_context=context[1:]
        else:
            valid=0
            rem_context=context
        return valid, rem_context


class digit(non_terminal):
    def __int__(self):
        self.name='digit'
    def v_visit(self):
        print('Value:')
        print('	number : '+str(self.val))
    def interpret(self, context):
        m = re.match('[0-9]', context[0])
        if m is not None:
            self.val=context[0]
            if len(context)!=1:
                valid=1
                rem_context=context[1:]
            else:
                valid=0
                rem_context=None
            return valid, rem_context
        else:
            valid=0
            rem_context=context
            return valid, rem_context


class operator1(non_terminal):
    def __int__(self):
        self.name='operator1'
    def v_visit(self):
        print('Value:')
        print('	number : '+str(self.val))
    def interpret(self, context):
        if context[0]=='+' or context[0]=='-':
            self.val=context[0]
            valid=1
            rem_context=context[1:len(context)]
            return valid, rem_context

class operator2(non_terminal):
    def __int__(self):
        self.name='operator2'
    def v_visit(self):
        print('Value:')
        print('	number : '+str(self.val))
    def interpret(self, context):
        if context[0]=='*' or context[0]=='/':
            self.val=context[0]
            valid=1
            rem_context=context[1:len(context)]
            return valid, rem_context
        else:
            valid=0
            rem_context=context
            return  valid,rem_context

class decpoint(non_terminal):
    def __int__(self):
        self.name='decpoint'
    def v_visit(self):
        print('Value:')
        print('	number : '+str(self.val))
    def interpret(self, context):
        if context[0]=='.':
            self.val=context[0]
            valid=1
            rem_context=context[1:]
            return valid, rem_context
        valid=0
        rem_context=context
        return  valid,rem_context


class number(non_terminal):
    def __int__(self):
        self.name='number'
    def s_visit(self):
        s=0
        print('Structure:')
        n=str(self.val)
        for i in n:
            m = re.match('[0-9]',i)
            if m is not None:
                print('		 digit : '+i)
            elif i=='.':
                s=1
                print('		 decpoint : '+i)
        if s==1:
            print('		 digit : ' + '0')
        print('	number : '+str(self.val))

    def v_visit(self):
        print('Value:')
        print('	number : '+str(self.val))
    def interpret(self, context):
        t = digit()
        av=''
        a, b = t.interpret(context)
        if a==1:
            av = av + t.val
        while a==1:
            t=digit()
            a,b=t.interpret(b)
            if a==1:
                av=av+t.val
        if b is not None:
            t=decpoint()
            a,b=t.interpret(b)
            if a==1:
                av=av+t.val
        else:
            av = av + t.val
            valid=0
            rem_context=None
            for i in av:
                if i == '.':
                    self.val = float(av)
                    return valid, rem_context
            self.val = int(av)
            return  valid,rem_context
        while a==1:
            t=digit()
            a,b=t.interpret(b)
            if a==1 or b is None:
                av=av+t.val
        valid=1
        rem_context=b
        s=0
        for i in av:
            if i=='.':
                self.val=float(av)
                return valid,rem_context
        self.val=int(av)
        return valid, rem_context


class term(non_terminal):
    def __int__(self,n,o):
        self.name='term'
    def s_visit(self):
        nlist=self.n.split(' ')
        print('Structure:')
        print('\t\t number : '+nlist[1])
        n=2
        for i in self.o:
            print('\t\t op2 : '+i)
            print('\t\t number : '+nlist[n])
            n+=1
        print('	term : '+str(self.val))

    def v_visit(self):
        print('Value:')
        print('	term : '+str(self.val))
    def interpret(self, context):
        self.n=''
        self.o=''
        s=0
        t=number()
        a,b=t.interpret(context)
        if a==1:
            self.n=self.n+' '+str(t.val)
        self.val=t.val
        while a==1 and b is not None:
            t = operator2()
            a,b=t.interpret(b)
            if a==1:
                self.o=self.o+str(t.val)
                if t.val=='*':
                    s=1
                else:
                    s=2
            if a!=1:
                a=1
                break
            t=number()
            a,b=t.interpret(b)
            self.n=self.n+' '+str(t.val)
            if s==1:
                self.val=self.val*t.val
            elif s==2:
                self.val=self.val/t.val
        valid=a
        rem_context=b
        s=0
        for i in str(self.val):
            if i=='.':
                s=1
                continue
            if s==1 and i!='0':
                return valid,rem_context
        self.val=int(self.val)
        for i in self.o:
            if i=='/':
                self.val=float(self.val)
        return valid, rem_context


class expression(non_terminal):
    def __int__(self,name,m,t,o):
        self.name='expression'

    def v_visit(self):
        print('Value:')
        print('	expression : '+str(self.val))
    def s_visit(self):
        print('Structure:')
        tlist=self.t.split('_')
        if self.m=='-1':
            print('		 minus : '+self.m)
        n=0
        print('		 term : '+tlist[n])
        for i in self.o:
            n+=1
            print('		 op1 : '+i)
            print('		 term : '+tlist[n])
        print('\texpression : '+str(self.val))
    def interpret(self,context):
        self.m = ''
        self.t = ''
        self.o = ''
        #minus part
        s=0
        t=minus()
        a,b=t.interpret(context)
        if a==1:
            self.m='-1'
            s=-1
        else:
            s=1
        #term part
        t=term()
        a,b=t.interpret(b)
        self.t=self.t+str(t.val)
        self.val=s*t.val
        #[operator1 term]*

        while a==1 and b is not None:
            t=operator1()
            a,b=t.interpret(b)
            if a==1:
                self.o=self.o+str(t.val)
                if t.val=='+':
                    s=1
                elif t.val=='-':
                    s=2
            t=term()
            a,b=t.interpret(b)
            self.t=self.t+'_'+str(t.val)
            if s==1:
                self.val=self.val+t.val
            elif s==2:
                self.val=self.val-t.val
        valid=1
        rem_context=context
        return valid, rem_context


e = expression()
v, rc = e.interpret('-123.22*234*2.3-23+4*5-6*7*8/2*3-7')
e.set_visitor(structure_visitor())
e.visit()